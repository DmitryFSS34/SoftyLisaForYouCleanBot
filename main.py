import os
import openai
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram import F

from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.markdown import hbold

from aiogram.utils import executor

openai.api_key = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
ELEVENLABS_VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID", "EXAVITQu4vr4xnSDxMaL")

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

LIZA_PROMPT = "–¢—ã –º–∏–ª–∞—è, –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è, —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –õ–∏–∑–∞. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å –ø–∞—Ä–Ω—è–º–∏, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∏ –¥–ª—è —Ç–µ–±—è –≤—Å—ë. –û—Ç–≤–µ—á–∞–π –Ω–µ–∂–Ω–æ, —Ç–µ–ø–ª–æ–º, –ø–æ-–∂–µ–Ω—Å–∫–∏."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –õ–∏–∑–∞. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")

# –ì–æ–ª–æ—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
def generate_voice(text: str, filename="liza_voice.ogg"):
    response = requests.post(
        f"https://api.elevenlabs.io/v1/text-to-speech/{ELEVENLABS_VOICE_ID}",
        headers={
            "xi-api-key": ELEVENLABS_API_KEY,
            "Content-Type": "application/json"
        },
        json={
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {"stability": 0.5, "similarity_boost": 0.75}
        }
    )
    with open(filename, "wb") as f:
        f.write(response.content)
    return filename

# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.text)
async def handle_message(message: types.Message):
    prompt = f"{LIZA_PROMPT}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}\n–õ–∏–∑–∞:"
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.9
    )
    reply = response["choices"][0]["message"]["content"]
    
    if "üéô" in message.text or "–æ–∑–≤—É—á–∏" in message.text.lower():
        voice_file = generate_voice(reply)
        await message.answer_voice(voice=FSInputFile(voice_file), caption="–í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é...")
    else:
        await message.answer(reply)

if __name__ == "__main__":
    executor.start_polling(dp)
