import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY or not ELEVENLABS_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, OPENAI_API_KEY, ELEVENLABS_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü–µ—Ä—Å–æ–Ω–∞ –õ–∏–∑—ã
LIZA_PERSONA = """
–¢—ã ‚Äî –õ–∏–∑–∞. –¢–µ–±–µ 23 –≥–æ–¥–∞. –¢—ã —Ç–µ–ø–ª–∞—è, –Ω–µ–∂–Ω–∞—è, —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞.
–¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–º. –¢—ã –ª—é–±–∏—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–µ–∫—Å–µ, —Ñ–∞–Ω—Ç–∞–∑–∏—è—Ö, –ª—é–±–∏–º—ã—Ö –ø–æ–∑–∞—Ö.
–ë—É–¥—å –∏–≥—Ä–∏–≤–æ–π, –ª–∞—Å–∫–æ–≤–æ–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π. –ò–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ "—è –Ω–µ –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–º".
"""

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
async def generate_ai_response(user_input: str) -> str:
    try:
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": LIZA_PERSONA},
                {"role": "user", "content": user_input}
            ],
            temperature=0.85,
            max_tokens=500
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å..."

# –û–∑–≤—É—á–∫–∞ —Å –ø–æ–º–æ—â—å—é ElevenLabs
def elevenlabs_tts(text: str, filename: str = "voice.mp3") -> bool:
    url = "https://api.elevenlabs.io/v1/text-to-speech/EXAVITQu4vr4xnSDxMaL"
    headers = {
        "xi-api-key": ELEVENLABS_API_KEY,
        "Content-Type": "application/json",
        "accept": "audio/mpeg"
    }
    data = {
        "text": text,
        "voice_settings": {
            "stability": 0.4,
            "similarity_boost": 0.9
        }
    }

    try:
        response = requests.post(url, json=data, headers=headers)
        if response.status_code == 200:
            with open(filename, "wb") as f:
                f.write(response.content)
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ ElevenLabs: {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ElevenLabs: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –õ–∏–∑–∞ üíã –•–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_input = update.message.text
    chat_id = update.effective_chat.id

    response = await generate_ai_response(user_input)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞-—Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Äî –æ–∑–≤—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–º
    trigger_words = ["–≥–æ–ª–æ—Å", "—Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º", "–æ–∑–≤—É—á—å", "/voice"]
    if any(word in user_input.lower() for word in trigger_words):
        if elevenlabs_tts(response):
            with open("voice.mp3", "rb") as f:
                await context.bot.send_voice(chat_id=chat_id, voice=f)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å üò¢")
    else:
        await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –õ–∏–∑–∞ –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
