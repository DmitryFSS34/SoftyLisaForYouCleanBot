import os
import openai
import aiohttp
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
ELEVENLABS_VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID", "EXAVITQu4vr4xnSDxMaL")  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç

openai.api_key = OPENAI_API_KEY

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# üîä –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –æ–∑–≤—É—á–∫–∏
def needs_voice(message: str) -> bool:
    message = message.lower()
    return any(
        phrase in message
        for phrase in ["—Å–∫–∞–∂–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–º", "–æ—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–º", "–≥–æ–ª–æ—Å–æ–º", "–æ–∑–≤—É—á–∏", "–æ–∑–≤—É—á—å"]
    )


# üé§ –û–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ ElevenLabs
async def text_to_speech(text: str) -> bytes:
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{ELEVENLABS_VOICE_ID}"
    headers = {
        "xi-api-key": ELEVENLABS_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "text": text,
        "model_id": "eleven_monolingual_v1",
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.8
        }
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, headers=headers) as resp:
            if resp.status == 200:
                return await resp.read()
            else:
                raise Exception(f"ElevenLabs error {resp.status}: {await resp.text()}")


# ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: Message):
    user_text = message.text.strip()

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å
    use_voice = needs_voice(user_text)

    # üí¨ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –º–∏–ª–∞—è –∏ –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –õ–∏–∑–∞. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ –∏ –Ω–µ–º–Ω–æ–≥–æ —Ñ–ª–∏—Ä—Ç—É—è, –ø–æ-—Ä—É—Å—Å–∫–∏."},
            {"role": "user", "content": user_text}
        ],
        temperature=0.9,
    )
    reply_text = response["choices"][0]["message"]["content"]

    if use_voice:
        try:
            voice_data = await text_to_speech(reply_text)
            await message.answer_voice(voice_data)
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –æ–∑–≤—É—á–∫–æ–π üò¢")
    else:
        await message.answer(reply_text)


# üöÄ –°—Ç–∞—Ä—Ç
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
