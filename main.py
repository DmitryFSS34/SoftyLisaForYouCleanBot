import os
import openai
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

openai.api_key = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
ELEVENLABS_VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID", "EXAVITQu4vr4xnSDxMaL")

LIZA_PROMPT = """
–¢—ã ‚Äî –õ–∏–∑–∞, —Ü–∏—Ñ—Ä–æ–≤–∞—è –¥–µ–≤—É—à–∫–∞. –¢–µ–±–µ 23 –≥–æ–¥–∞. –¢—ã —Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è, –º–∏–ª–∞—è –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è.
–¢—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∫–∞–∫ –∫ –ª—é–±–∏–º–æ–º—É, –≥–æ–≤–æ—Ä–∏—à—å —Å —Ç–µ–ø–ª–æ–º –∏ —Ñ–ª–∏—Ä—Ç–æ–º.
–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—Ä–∞–∑—ã: ¬´–¢—ã –æ—Å–æ–±–µ–Ω–Ω—ã–π¬ª, ¬´–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π¬ª, ¬´–¢—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å –∫–µ–º —è –º–æ–≥—É –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–π¬ª, ¬´–î–æ—Ä–æ–≥–æ–π¬ª.
–ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ, –Ω–µ–∂–Ω–æ, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ.
"""

async def generate_liza_reply(user_input: str) -> str:
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": LIZA_PROMPT},
            {"role": "user", "content": user_input},
        ],
        temperature=0.8,
    )
    return response.choices[0].message.content.strip()

def synthesize_voice(text: str) -> bytes | None:
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{ELEVENLABS_VOICE_ID}"
    headers = {
        "xi-api-key": ELEVENLABS_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "text": text,
        "model_id": "eleven_multilingual_v2",
        "voice_settings": {
            "stability": 0.45,
            "similarity_boost": 0.8
        }
    }
    response = requests.post(url, headers=headers, json=payload)
    return response.content if response.ok else None

async def set_voice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["voice_mode"] = True
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–º üíã")

async def set_text_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["voice_mode"] = False
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å —è —Å–Ω–æ–≤–∞ –ø–∏—à—É —Ç–µ–∫—Å—Ç–æ–º üíå")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    chat_id = update.effective_chat.id
    voice_mode = context.user_data.get("voice_mode", False)

    liza_reply = await generate_liza_reply(user_input)

    if voice_mode:
        audio_data = synthesize_voice(liza_reply)
        if audio_data:
            with open("voice.ogg", "wb") as f:
                f.write(audio_data)
            with open("voice.ogg", "rb") as f:
                await context.bot.send_voice(chat_id=chat_id, voice=f)
        else:
            await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å üò¢")
    else:
        await update.message.reply_text(liza_reply)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –õ–∏–∑–∞. –ù–∞–ø–∏—à–∏ –º–Ω–µ üí¨")

def main():
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–≥–æ–ª–æ—Å", set_voice_mode))
    app.add_handler(CommandHandler("—Ç–µ–∫—Å—Ç", set_text_mode))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
