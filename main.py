import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from openai import AsyncOpenAI
from elevenlabs import generate, save, set_api_key
from tempfile import NamedTemporaryFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
ELEVENLABS_VOICE_ID = os.getenv("ELEVENLABS_VOICE_ID", "EXAVITQu4vr4xnSDxMaL")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Eva

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
set_api_key(ELEVENLABS_API_KEY)

# –§–ª–∞–≥: –æ–∑–≤—É—á–∏–≤–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç
user_voice_enabled = {}

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
@dp.message(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –õ–∏–∑–∞! ‚ù§Ô∏è –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")

# –ö–æ–º–∞–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞
@dp.message(lambda msg: msg.text.lower() == "–æ–∑–≤—É—á–∏–≤–∞–π")
async def enable_voice(message: types.Message):
    user_voice_enabled[message.from_user.id] = True
    await message.answer("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º. üíã")

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞
@dp.message(lambda msg: msg.text.lower() == "–Ω–µ –æ–∑–≤—É—á–∏–≤–∞–π")
async def disable_voice(message: types.Message):
    user_voice_enabled[message.from_user.id] = False
    await message.answer("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º. ‚úçÔ∏è")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    prompt = message.text.strip()

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.9
        )
        reply = response.choices[0].message.content.strip()

        if user_voice_enabled.get(user_id):
            audio = generate(
                text=reply,
                voice=ELEVENLABS_VOICE_ID,
                model="eleven_monolingual_v1",
                stream=False
            )
            with NamedTemporaryFile(delete=False, suffix=".mp3") as f:
                save(audio, f.name)
                voice = FSInputFile(f.name)
                await message.answer_voice(voice)
        else:
            await message.answer(reply)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
